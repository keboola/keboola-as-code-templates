CREATE TABLE `bdm_products` (
  PRODUCT_ID STRING NOT NULL,
  PRODUCT_CODE STRING,
  PRODUCT_NAME STRING,
  PRODUCT_MANUFACTURER STRING,
  PRODUCT_TYPE STRING,
  PRODUCT_EAN STRING,
  PRODUCT_PRICE FLOAT64,
  PRODUCT_STANDARD_PRICE FLOAT64,
  PRODUCT_PURCHASE_PRICE FLOAT64,
  PRODUCT_STOCK_AMOUNT INT64,
  PRODUCT_URL STRING,
  TOTAL_UNITS_SOLD INT64,
  UNITS_SOLD_LAST_MONTH INT64,
  AVG_SOLD_UNITS_PER_DAY FLOAT64,
  STOCK_REFILL FLOAT64,
  IS_DELETED BOOL
);

/* this calculates unit sales for each product over the last 30 days, 90 days */
CREATE OR REPLACE TABLE `product_totals` AS
SELECT DISTINCT
  OP.`product_id` AS PRODUCT_ID,
  IF(P.UNITS_SOLD_LAST_MONTH IS NULL, 0, P.UNITS_SOLD_LAST_MONTH) AS UNITS_SOLD_LAST_MONTH,
  IF(T.AVERAGE_UNITS_PER_DAY IS NULL, 0, T.AVERAGE_UNITS_PER_DAY) AS AVG_SOLD_UNITS_PER_DAY,
  IF(SUM(OP.`quantity`) IS NULL, 0, SUM(OP.`quantity`)) AS TOTAL_UNITS_SOLD
FROM `order_line_items` AS OP
LEFT JOIN (
  SELECT
    `product_id`,
    SUM(`quantity`) AS UNITS_SOLD_LAST_MONTH
  FROM `order_line_items` AS op
  LEFT JOIN `order` AS o
    ON op.`order_id` = o.`id`
  WHERE
    CAST(`date_created` AS DATE) >= TIMESTAMP_TRUNC(CURRENT_DATE, DAY) - INTERVAL '30' DAY
    AND CAST(`date_created` AS DATE) <= CURRENT_DATE
  GROUP BY
    1
) AS P
  ON OP.`product_id` = P.`product_id`
LEFT JOIN (
  SELECT
    `product_id`,
    SUM(`quantity`) AS UNITS_SOLD_LAST_90DAYS,
    SUM(`quantity`) / 90 AS AVERAGE_UNITS_PER_DAY
  FROM `order_line_items` AS op
  LEFT JOIN `order` AS o
    ON op.`order_id` = o.`id`
  WHERE
    CAST(`date_created` AS DATE) >= TIMESTAMP_TRUNC(CURRENT_DATE, DAY) - INTERVAL '90' DAY
    AND CAST(`date_created` AS DATE) <= CURRENT_DATE
  GROUP BY
    1
) AS T
  ON OP.`product_id` = T.`product_id`
GROUP BY
  1,
  2,
  3;

INSERT INTO `bdm_products`
SELECT
  P.`id` AS PRODUCT_ID,
  P.`id` AS PRODUCT_CODE,
  P.`name` AS PRODUCT_NAME,
  CAST('' AS STRING) AS PRODUCT_MANUFACTURER,
  P.`type` AS PRODUCT_TYPE,
  P.`sku` AS PRODUCT_EAN,
  IF(P.`price` = '', 0, P.`price`) AS PRODUCT_PRICE,
  IF(P.`regular_price` = '', 0, P.`regular_price`) AS PRODUCT_STANDARD_PRICE,
  NULL AS PRODUCT_PURCHASE_PRICE,
  IF(P.`stock_quantity` = '', 0, `stock_quantity`) AS PRODUCT_STOCK_AMOUNT,
  IF(P.`permalink` = '', P.`external_url`, P.`permalink`) AS PRODUCT_URL,
  PT.TOTAL_UNITS_SOLD AS TOTAL_UNITS_SOLD,
  PT.UNITS_SOLD_LAST_MONTH AS UNITS_SOLD_LAST_MONTH,
  PT.AVG_SOLD_UNITS_PER_DAY AS AVG_SOLD_UNITS_PER_DAY,
  IF(
    PT.AVG_SOLD_UNITS_PER_DAY = 0
    AND NOT IF(P.`stock_quantity` = '', 0, `stock_quantity`) IS NULL,
    0,
    IF(P.`stock_quantity` = '', 0, `stock_quantity`) / PT.AVG_SOLD_UNITS_PER_DAY
  ) AS STOCK_REFILL,
  FALSE AS IS_DELETED
FROM `product` AS P
LEFT JOIN `product_totals` AS PT
  ON P.`id` = PT.PRODUCT_ID;

/* - ADD missing / deleted items */
CREATE OR REPLACE TABLE `deleted_products` AS
SELECT DISTINCT
  `product_id` AS PRODUCT_ID,
  CAST('' AS STRING) AS PRODUCT_TYPE,
  ANY_VALUE(O.`name`) AS PRODUCT_NAME
FROM `order_line_items` AS O
LEFT JOIN `product` AS P
  ON O.`product_id` = P.`id`
WHERE
  P.`id` IS NULL
GROUP BY
  1,
  2;

INSERT INTO `bdm_products`
SELECT
  DP.PRODUCT_ID AS PRODUCT_ID,
  DP.PRODUCT_ID AS PRODUCT_CODE,
  DP.PRODUCT_NAME AS PRODUCT_NAME,
  'N/A' AS PRODUCT_MANUFACTURER,
  DP.PRODUCT_TYPE AS PRODUCT_TYPE,
  'N/A' AS PRODUCT_EAN,
  NULL AS PRODUCT_PRICE,
  NULL AS PRODUCT_STANDARD_PRICE,
  NULL AS PRODUCT_PURCHASE_PRICE,
  NULL AS PRODUCT_STOCK_AMOUNT,
  'N/A' AS PRODUCT_URL,
  NULL AS TOTAL_UNITS_SOLD,
  NULL AS UNITS_SOLD_LAST_MONTH,
  NULL AS AVG_SOLD_UNITS_PER_DAY,
  NULL AS STOCK_REFILL,
  TRUE AS IS_DELETED
FROM `deleted_products` AS DP
QUALIFY
  ROW_NUMBER() OVER (PARTITION BY DP.PRODUCT_ID ORDER BY DP.PRODUCT_TYPE NULLS LAST) = 1;

/* some do not have code */
UPDATE `bdm_products` SET PRODUCT_ID = 'N/A'
WHERE
  PRODUCT_ID = '';